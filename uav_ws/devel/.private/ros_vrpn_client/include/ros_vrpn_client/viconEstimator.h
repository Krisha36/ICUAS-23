// Generated by gencpp from file ros_vrpn_client/viconEstimator.msg
// DO NOT EDIT!


#ifndef ROS_VRPN_CLIENT_MESSAGE_VICONESTIMATOR_H
#define ROS_VRPN_CLIENT_MESSAGE_VICONESTIMATOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace ros_vrpn_client
{
template <class ContainerAllocator>
struct viconEstimator_
{
  typedef viconEstimator_<ContainerAllocator> Type;

  viconEstimator_()
    : header()
    , pos_measured()
    , pos_old()
    , vel_old()
    , pos_est()
    , vel_est()
    , quat_measured()
    , quat_old()
    , omega_old()
    , quat_est()
    , omega_est()
    , covariance()
    , q_covariance_trace()
    , outlier_flag()
    , measurement_flip_flag()
    , q_Z_Z1_magnitude()
    , q_Z_B_mahalanobis_distance()  {
    }
  viconEstimator_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pos_measured(_alloc)
    , pos_old(_alloc)
    , vel_old(_alloc)
    , pos_est(_alloc)
    , vel_est(_alloc)
    , quat_measured(_alloc)
    , quat_old(_alloc)
    , omega_old(_alloc)
    , quat_est(_alloc)
    , omega_est(_alloc)
    , covariance(_alloc)
    , q_covariance_trace(_alloc)
    , outlier_flag(_alloc)
    , measurement_flip_flag(_alloc)
    , q_Z_Z1_magnitude(_alloc)
    , q_Z_B_mahalanobis_distance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_measured_type;
  _pos_measured_type pos_measured;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_old_type;
  _pos_old_type pos_old;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_old_type;
  _vel_old_type vel_old;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_est_type;
  _pos_est_type pos_est;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_est_type;
  _vel_est_type vel_est;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quat_measured_type;
  _quat_measured_type quat_measured;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quat_old_type;
  _quat_old_type quat_old;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _omega_old_type;
  _omega_old_type omega_old;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quat_est_type;
  _quat_est_type quat_est;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _omega_est_type;
  _omega_est_type omega_est;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _covariance_type;
  _covariance_type covariance;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _q_covariance_trace_type;
  _q_covariance_trace_type q_covariance_trace;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _outlier_flag_type;
  _outlier_flag_type outlier_flag;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _measurement_flip_flag_type;
  _measurement_flip_flag_type measurement_flip_flag;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _q_Z_Z1_magnitude_type;
  _q_Z_Z1_magnitude_type q_Z_Z1_magnitude;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _q_Z_B_mahalanobis_distance_type;
  _q_Z_B_mahalanobis_distance_type q_Z_B_mahalanobis_distance;





  typedef boost::shared_ptr< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> const> ConstPtr;

}; // struct viconEstimator_

typedef ::ros_vrpn_client::viconEstimator_<std::allocator<void> > viconEstimator;

typedef boost::shared_ptr< ::ros_vrpn_client::viconEstimator > viconEstimatorPtr;
typedef boost::shared_ptr< ::ros_vrpn_client::viconEstimator const> viconEstimatorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_vrpn_client::viconEstimator_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_vrpn_client::viconEstimator_<ContainerAllocator1> & lhs, const ::ros_vrpn_client::viconEstimator_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pos_measured == rhs.pos_measured &&
    lhs.pos_old == rhs.pos_old &&
    lhs.vel_old == rhs.vel_old &&
    lhs.pos_est == rhs.pos_est &&
    lhs.vel_est == rhs.vel_est &&
    lhs.quat_measured == rhs.quat_measured &&
    lhs.quat_old == rhs.quat_old &&
    lhs.omega_old == rhs.omega_old &&
    lhs.quat_est == rhs.quat_est &&
    lhs.omega_est == rhs.omega_est &&
    lhs.covariance == rhs.covariance &&
    lhs.q_covariance_trace == rhs.q_covariance_trace &&
    lhs.outlier_flag == rhs.outlier_flag &&
    lhs.measurement_flip_flag == rhs.measurement_flip_flag &&
    lhs.q_Z_Z1_magnitude == rhs.q_Z_Z1_magnitude &&
    lhs.q_Z_B_mahalanobis_distance == rhs.q_Z_B_mahalanobis_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_vrpn_client::viconEstimator_<ContainerAllocator1> & lhs, const ::ros_vrpn_client::viconEstimator_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_vrpn_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82b97d44991fc103d2c1502deedf5328";
  }

  static const char* value(const ::ros_vrpn_client::viconEstimator_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82b97d44991fc103ULL;
  static const uint64_t static_value2 = 0xd2c1502deedf5328ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_vrpn_client/viconEstimator";
  }

  static const char* value(const ::ros_vrpn_client::viconEstimator_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"geometry_msgs/Vector3     pos_measured           # the measured body position\n"
"geometry_msgs/Vector3     pos_old                # the old body position\n"
"geometry_msgs/Vector3     vel_old                # the old body velocity\n"
"geometry_msgs/Vector3     pos_est                # the posteriori body position\n"
"geometry_msgs/Vector3     vel_est                # the posteriori body velocity\n"
"\n"
"geometry_msgs/Quaternion  quat_measured          # the measured body orientation\n"
"geometry_msgs/Quaternion  quat_old               # the old body orientation\n"
"geometry_msgs/Vector3     omega_old              # the old body rate\n"
"geometry_msgs/Quaternion  quat_est               # the posteriori body orientation\n"
"geometry_msgs/Vector3     omega_est              # the posteriori body rate\n"
"\n"
"std_msgs/Float64MultiArray covariance\n"
"std_msgs/Float64 		  q_covariance_trace\n"
"\n"
"std_msgs/Bool             outlier_flag           # flag indicating if the measurement at this timestep was detected as being an outlier\n"
"std_msgs/Bool             measurement_flip_flag  # flag indicating if the measurement from vicon has undergone a redundant flipping.\n"
"\n"
"std_msgs/Float64          q_Z_Z1_magnitude       # the magnitude of the quaternion between subsequent measurements\n"
"std_msgs/Float64          q_Z_B_mahalanobis_distance # The mahalanobis distance of the current measurement\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::ros_vrpn_client::viconEstimator_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pos_measured);
      stream.next(m.pos_old);
      stream.next(m.vel_old);
      stream.next(m.pos_est);
      stream.next(m.vel_est);
      stream.next(m.quat_measured);
      stream.next(m.quat_old);
      stream.next(m.omega_old);
      stream.next(m.quat_est);
      stream.next(m.omega_est);
      stream.next(m.covariance);
      stream.next(m.q_covariance_trace);
      stream.next(m.outlier_flag);
      stream.next(m.measurement_flip_flag);
      stream.next(m.q_Z_Z1_magnitude);
      stream.next(m.q_Z_B_mahalanobis_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct viconEstimator_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_vrpn_client::viconEstimator_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_vrpn_client::viconEstimator_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pos_measured: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_measured);
    s << indent << "pos_old: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_old);
    s << indent << "vel_old: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel_old);
    s << indent << "pos_est: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_est);
    s << indent << "vel_est: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel_est);
    s << indent << "quat_measured: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quat_measured);
    s << indent << "quat_old: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quat_old);
    s << indent << "omega_old: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.omega_old);
    s << indent << "quat_est: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quat_est);
    s << indent << "omega_est: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.omega_est);
    s << indent << "covariance: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.covariance);
    s << indent << "q_covariance_trace: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.q_covariance_trace);
    s << indent << "outlier_flag: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.outlier_flag);
    s << indent << "measurement_flip_flag: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.measurement_flip_flag);
    s << indent << "q_Z_Z1_magnitude: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.q_Z_Z1_magnitude);
    s << indent << "q_Z_B_mahalanobis_distance: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.q_Z_B_mahalanobis_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_VRPN_CLIENT_MESSAGE_VICONESTIMATOR_H
