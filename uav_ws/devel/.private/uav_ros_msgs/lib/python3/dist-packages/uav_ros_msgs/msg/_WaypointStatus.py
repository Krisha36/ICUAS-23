# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uav_ros_msgs/WaypointStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import uav_ros_msgs.msg

class WaypointStatus(genpy.Message):
  _md5sum = "021f457a05842437855a781f5c15081a"
  _type = "uav_ros_msgs/WaypointStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uav_ros_msgs/Waypoint   current_wp
float64                 distance_to_wp
bool                    flying_to_wp
bool                    waiting_at_wp
================================================================================
MSG: uav_ros_msgs/Waypoint
geometry_msgs/PoseStamped   pose
float64                     waiting_time
uav_ros_msgs/Task[]         tasks

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: uav_ros_msgs/Task
string PICKUP_TASK = "PickupTask"
string DROPOFF_TASK = "DropoffTask"

std_msgs/Header header
int32 id
string name
string type
float64 timeout
"""
  __slots__ = ['current_wp','distance_to_wp','flying_to_wp','waiting_at_wp']
  _slot_types = ['uav_ros_msgs/Waypoint','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_wp,distance_to_wp,flying_to_wp,waiting_at_wp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WaypointStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.current_wp is None:
        self.current_wp = uav_ros_msgs.msg.Waypoint()
      if self.distance_to_wp is None:
        self.distance_to_wp = 0.
      if self.flying_to_wp is None:
        self.flying_to_wp = False
      if self.waiting_at_wp is None:
        self.waiting_at_wp = False
    else:
      self.current_wp = uav_ros_msgs.msg.Waypoint()
      self.distance_to_wp = 0.
      self.flying_to_wp = False
      self.waiting_at_wp = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.current_wp.pose.header.seq, _x.current_wp.pose.header.stamp.secs, _x.current_wp.pose.header.stamp.nsecs))
      _x = self.current_wp.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8d().pack(_x.current_wp.pose.pose.position.x, _x.current_wp.pose.pose.position.y, _x.current_wp.pose.pose.position.z, _x.current_wp.pose.pose.orientation.x, _x.current_wp.pose.pose.orientation.y, _x.current_wp.pose.pose.orientation.z, _x.current_wp.pose.pose.orientation.w, _x.current_wp.waiting_time))
      length = len(self.current_wp.tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.current_wp.tasks:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.timeout
        buff.write(_get_struct_d().pack(_x))
      _x = self
      buff.write(_get_struct_d2B().pack(_x.distance_to_wp, _x.flying_to_wp, _x.waiting_at_wp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_wp is None:
        self.current_wp = uav_ros_msgs.msg.Waypoint()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.current_wp.pose.header.seq, _x.current_wp.pose.header.stamp.secs, _x.current_wp.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_wp.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_wp.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.current_wp.pose.pose.position.x, _x.current_wp.pose.pose.position.y, _x.current_wp.pose.pose.position.z, _x.current_wp.pose.pose.orientation.x, _x.current_wp.pose.pose.orientation.y, _x.current_wp.pose.pose.orientation.z, _x.current_wp.pose.pose.orientation.w, _x.current_wp.waiting_time,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current_wp.tasks = []
      for i in range(0, length):
        val1 = uav_ros_msgs.msg.Task()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _get_struct_I().unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        start = end
        end += 8
        (val1.timeout,) = _get_struct_d().unpack(str[start:end])
        self.current_wp.tasks.append(val1)
      _x = self
      start = end
      end += 10
      (_x.distance_to_wp, _x.flying_to_wp, _x.waiting_at_wp,) = _get_struct_d2B().unpack(str[start:end])
      self.flying_to_wp = bool(self.flying_to_wp)
      self.waiting_at_wp = bool(self.waiting_at_wp)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.current_wp.pose.header.seq, _x.current_wp.pose.header.stamp.secs, _x.current_wp.pose.header.stamp.nsecs))
      _x = self.current_wp.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8d().pack(_x.current_wp.pose.pose.position.x, _x.current_wp.pose.pose.position.y, _x.current_wp.pose.pose.position.z, _x.current_wp.pose.pose.orientation.x, _x.current_wp.pose.pose.orientation.y, _x.current_wp.pose.pose.orientation.z, _x.current_wp.pose.pose.orientation.w, _x.current_wp.waiting_time))
      length = len(self.current_wp.tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.current_wp.tasks:
        _v5 = val1.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.timeout
        buff.write(_get_struct_d().pack(_x))
      _x = self
      buff.write(_get_struct_d2B().pack(_x.distance_to_wp, _x.flying_to_wp, _x.waiting_at_wp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_wp is None:
        self.current_wp = uav_ros_msgs.msg.Waypoint()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.current_wp.pose.header.seq, _x.current_wp.pose.header.stamp.secs, _x.current_wp.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_wp.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_wp.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.current_wp.pose.pose.position.x, _x.current_wp.pose.pose.position.y, _x.current_wp.pose.pose.position.z, _x.current_wp.pose.pose.orientation.x, _x.current_wp.pose.pose.orientation.y, _x.current_wp.pose.pose.orientation.z, _x.current_wp.pose.pose.orientation.w, _x.current_wp.waiting_time,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current_wp.tasks = []
      for i in range(0, length):
        val1 = uav_ros_msgs.msg.Task()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        start = end
        end += 8
        (val1.timeout,) = _get_struct_d().unpack(str[start:end])
        self.current_wp.tasks.append(val1)
      _x = self
      start = end
      end += 10
      (_x.distance_to_wp, _x.flying_to_wp, _x.waiting_at_wp,) = _get_struct_d2B().unpack(str[start:end])
      self.flying_to_wp = bool(self.flying_to_wp)
      self.waiting_at_wp = bool(self.waiting_at_wp)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d2B = None
def _get_struct_d2B():
    global _struct_d2B
    if _struct_d2B is None:
        _struct_d2B = struct.Struct("<d2B")
    return _struct_d2B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
