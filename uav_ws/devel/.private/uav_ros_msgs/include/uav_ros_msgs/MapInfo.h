// Generated by gencpp from file uav_ros_msgs/MapInfo.msg
// DO NOT EDIT!


#ifndef UAV_ROS_MSGS_MESSAGE_MAPINFO_H
#define UAV_ROS_MSGS_MESSAGE_MAPINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_ros_msgs
{
template <class ContainerAllocator>
struct MapInfo_
{
  typedef MapInfo_<ContainerAllocator> Type;

  MapInfo_()
    : x_max(0.0)
    , y_max(0.0)
    , px_width(0)
    , px_height(0)
    , resolution(0.0)
    , origin_x(0)
    , origin_y(0)
    , orientation(0.0)  {
    }
  MapInfo_(const ContainerAllocator& _alloc)
    : x_max(0.0)
    , y_max(0.0)
    , px_width(0)
    , px_height(0)
    , resolution(0.0)
    , origin_x(0)
    , origin_y(0)
    , orientation(0.0)  {
  (void)_alloc;
    }



   typedef float _x_max_type;
  _x_max_type x_max;

   typedef float _y_max_type;
  _y_max_type y_max;

   typedef int32_t _px_width_type;
  _px_width_type px_width;

   typedef int32_t _px_height_type;
  _px_height_type px_height;

   typedef float _resolution_type;
  _resolution_type resolution;

   typedef int32_t _origin_x_type;
  _origin_x_type origin_x;

   typedef int32_t _origin_y_type;
  _origin_y_type origin_y;

   typedef float _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::uav_ros_msgs::MapInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_ros_msgs::MapInfo_<ContainerAllocator> const> ConstPtr;

}; // struct MapInfo_

typedef ::uav_ros_msgs::MapInfo_<std::allocator<void> > MapInfo;

typedef boost::shared_ptr< ::uav_ros_msgs::MapInfo > MapInfoPtr;
typedef boost::shared_ptr< ::uav_ros_msgs::MapInfo const> MapInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_ros_msgs::MapInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_ros_msgs::MapInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_ros_msgs::MapInfo_<ContainerAllocator1> & lhs, const ::uav_ros_msgs::MapInfo_<ContainerAllocator2> & rhs)
{
  return lhs.x_max == rhs.x_max &&
    lhs.y_max == rhs.y_max &&
    lhs.px_width == rhs.px_width &&
    lhs.px_height == rhs.px_height &&
    lhs.resolution == rhs.resolution &&
    lhs.origin_x == rhs.origin_x &&
    lhs.origin_y == rhs.origin_y &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_ros_msgs::MapInfo_<ContainerAllocator1> & lhs, const ::uav_ros_msgs::MapInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_ros_msgs::MapInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_ros_msgs::MapInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_ros_msgs::MapInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_ros_msgs::MapInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_ros_msgs::MapInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_ros_msgs::MapInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_ros_msgs::MapInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3413911c533c56c32b8c86eea1ca2ba";
  }

  static const char* value(const ::uav_ros_msgs::MapInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3413911c533c56cULL;
  static const uint64_t static_value2 = 0x32b8c86eea1ca2baULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_ros_msgs::MapInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_ros_msgs/MapInfo";
  }

  static const char* value(const ::uav_ros_msgs::MapInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_ros_msgs::MapInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x_max\n"
"float32 y_max\n"
"int32   px_width\n"
"int32   px_height\n"
"float32 resolution\n"
"\n"
"# Origin of global coordinate system in the image reference frame (px)\n"
"\n"
"int32 origin_x\n"
"int32 origin_y\n"
"\n"
"# The angle between the axes of the global and the image coordinate system\n"
"# With respect to the image z axis in radians.\n"
"\n"
"float32 orientation\n"
;
  }

  static const char* value(const ::uav_ros_msgs::MapInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_ros_msgs::MapInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_max);
      stream.next(m.y_max);
      stream.next(m.px_width);
      stream.next(m.px_height);
      stream.next(m.resolution);
      stream.next(m.origin_x);
      stream.next(m.origin_y);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_ros_msgs::MapInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_ros_msgs::MapInfo_<ContainerAllocator>& v)
  {
    s << indent << "x_max: ";
    Printer<float>::stream(s, indent + "  ", v.x_max);
    s << indent << "y_max: ";
    Printer<float>::stream(s, indent + "  ", v.y_max);
    s << indent << "px_width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.px_width);
    s << indent << "px_height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.px_height);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "origin_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.origin_x);
    s << indent << "origin_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.origin_y);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_ROS_MSGS_MESSAGE_MAPINFO_H
