// Generated by gencpp from file uav_ros_msgs/Task.msg
// DO NOT EDIT!


#ifndef UAV_ROS_MSGS_MESSAGE_TASK_H
#define UAV_ROS_MSGS_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace uav_ros_msgs
{
template <class ContainerAllocator>
struct Task_
{
  typedef Task_<ContainerAllocator> Type;

  Task_()
    : header()
    , id(0)
    , name()
    , type()
    , timeout(0.0)  {
    }
  Task_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , name(_alloc)
    , type(_alloc)
    , timeout(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef double _timeout_type;
  _timeout_type timeout;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PICKUP_TASK)
  #undef PICKUP_TASK
#endif
#if defined(_WIN32) && defined(DROPOFF_TASK)
  #undef DROPOFF_TASK
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PICKUP_TASK;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DROPOFF_TASK;

  typedef boost::shared_ptr< ::uav_ros_msgs::Task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_ros_msgs::Task_<ContainerAllocator> const> ConstPtr;

}; // struct Task_

typedef ::uav_ros_msgs::Task_<std::allocator<void> > Task;

typedef boost::shared_ptr< ::uav_ros_msgs::Task > TaskPtr;
typedef boost::shared_ptr< ::uav_ros_msgs::Task const> TaskConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Task_<ContainerAllocator>::PICKUP_TASK =
        
          "\"PickupTask\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Task_<ContainerAllocator>::DROPOFF_TASK =
        
          "\"DropoffTask\""
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_ros_msgs::Task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_ros_msgs::Task_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_ros_msgs::Task_<ContainerAllocator1> & lhs, const ::uav_ros_msgs::Task_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.name == rhs.name &&
    lhs.type == rhs.type &&
    lhs.timeout == rhs.timeout;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_ros_msgs::Task_<ContainerAllocator1> & lhs, const ::uav_ros_msgs::Task_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_ros_msgs::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_ros_msgs::Task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_ros_msgs::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_ros_msgs::Task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_ros_msgs::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_ros_msgs::Task_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_ros_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9cc75d829ee178c7d523616d41bda34";
  }

  static const char* value(const ::uav_ros_msgs::Task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9cc75d829ee178cULL;
  static const uint64_t static_value2 = 0x7d523616d41bda34ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_ros_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_ros_msgs/Task";
  }

  static const char* value(const ::uav_ros_msgs::Task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_ros_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string PICKUP_TASK = \"PickupTask\"\n"
"string DROPOFF_TASK = \"DropoffTask\"\n"
"\n"
"std_msgs/Header header\n"
"int32 id\n"
"string name\n"
"string type\n"
"float64 timeout\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::uav_ros_msgs::Task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_ros_msgs::Task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_ros_msgs::Task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_ros_msgs::Task_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "timeout: ";
    Printer<double>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_ROS_MSGS_MESSAGE_TASK_H
