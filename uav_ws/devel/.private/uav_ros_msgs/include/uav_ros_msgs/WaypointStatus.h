// Generated by gencpp from file uav_ros_msgs/WaypointStatus.msg
// DO NOT EDIT!


#ifndef UAV_ROS_MSGS_MESSAGE_WAYPOINTSTATUS_H
#define UAV_ROS_MSGS_MESSAGE_WAYPOINTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <uav_ros_msgs/Waypoint.h>

namespace uav_ros_msgs
{
template <class ContainerAllocator>
struct WaypointStatus_
{
  typedef WaypointStatus_<ContainerAllocator> Type;

  WaypointStatus_()
    : current_wp()
    , distance_to_wp(0.0)
    , flying_to_wp(false)
    , waiting_at_wp(false)  {
    }
  WaypointStatus_(const ContainerAllocator& _alloc)
    : current_wp(_alloc)
    , distance_to_wp(0.0)
    , flying_to_wp(false)
    , waiting_at_wp(false)  {
  (void)_alloc;
    }



   typedef  ::uav_ros_msgs::Waypoint_<ContainerAllocator>  _current_wp_type;
  _current_wp_type current_wp;

   typedef double _distance_to_wp_type;
  _distance_to_wp_type distance_to_wp;

   typedef uint8_t _flying_to_wp_type;
  _flying_to_wp_type flying_to_wp;

   typedef uint8_t _waiting_at_wp_type;
  _waiting_at_wp_type waiting_at_wp;





  typedef boost::shared_ptr< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointStatus_

typedef ::uav_ros_msgs::WaypointStatus_<std::allocator<void> > WaypointStatus;

typedef boost::shared_ptr< ::uav_ros_msgs::WaypointStatus > WaypointStatusPtr;
typedef boost::shared_ptr< ::uav_ros_msgs::WaypointStatus const> WaypointStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_ros_msgs::WaypointStatus_<ContainerAllocator1> & lhs, const ::uav_ros_msgs::WaypointStatus_<ContainerAllocator2> & rhs)
{
  return lhs.current_wp == rhs.current_wp &&
    lhs.distance_to_wp == rhs.distance_to_wp &&
    lhs.flying_to_wp == rhs.flying_to_wp &&
    lhs.waiting_at_wp == rhs.waiting_at_wp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_ros_msgs::WaypointStatus_<ContainerAllocator1> & lhs, const ::uav_ros_msgs::WaypointStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "021f457a05842437855a781f5c15081a";
  }

  static const char* value(const ::uav_ros_msgs::WaypointStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x021f457a05842437ULL;
  static const uint64_t static_value2 = 0x855a781f5c15081aULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_ros_msgs/WaypointStatus";
  }

  static const char* value(const ::uav_ros_msgs::WaypointStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_ros_msgs/Waypoint   current_wp\n"
"float64                 distance_to_wp\n"
"bool                    flying_to_wp\n"
"bool                    waiting_at_wp\n"
"================================================================================\n"
"MSG: uav_ros_msgs/Waypoint\n"
"geometry_msgs/PoseStamped   pose\n"
"float64                     waiting_time\n"
"uav_ros_msgs/Task[]         tasks\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: uav_ros_msgs/Task\n"
"string PICKUP_TASK = \"PickupTask\"\n"
"string DROPOFF_TASK = \"DropoffTask\"\n"
"\n"
"std_msgs/Header header\n"
"int32 id\n"
"string name\n"
"string type\n"
"float64 timeout\n"
;
  }

  static const char* value(const ::uav_ros_msgs::WaypointStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_wp);
      stream.next(m.distance_to_wp);
      stream.next(m.flying_to_wp);
      stream.next(m.waiting_at_wp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_ros_msgs::WaypointStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_ros_msgs::WaypointStatus_<ContainerAllocator>& v)
  {
    s << indent << "current_wp: ";
    s << std::endl;
    Printer< ::uav_ros_msgs::Waypoint_<ContainerAllocator> >::stream(s, indent + "  ", v.current_wp);
    s << indent << "distance_to_wp: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_wp);
    s << indent << "flying_to_wp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flying_to_wp);
    s << indent << "waiting_at_wp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waiting_at_wp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_ROS_MSGS_MESSAGE_WAYPOINTSTATUS_H
