// Generated by gencpp from file uav_ros_msgs/GeoBrickApproachRequest.msg
// DO NOT EDIT!


#ifndef UAV_ROS_MSGS_MESSAGE_GEOBRICKAPPROACHREQUEST_H
#define UAV_ROS_MSGS_MESSAGE_GEOBRICKAPPROACHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_ros_msgs
{
template <class ContainerAllocator>
struct GeoBrickApproachRequest_
{
  typedef GeoBrickApproachRequest_<ContainerAllocator> Type;

  GeoBrickApproachRequest_()
    : enable(false)
    , brick_color()
    , latitude(0.0)
    , longitude(0.0)
    , altitude_relative(0.0)  {
    }
  GeoBrickApproachRequest_(const ContainerAllocator& _alloc)
    : enable(false)
    , brick_color(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude_relative(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_type;
  _enable_type enable;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _brick_color_type;
  _brick_color_type brick_color;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_relative_type;
  _altitude_relative_type altitude_relative;





  typedef boost::shared_ptr< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GeoBrickApproachRequest_

typedef ::uav_ros_msgs::GeoBrickApproachRequest_<std::allocator<void> > GeoBrickApproachRequest;

typedef boost::shared_ptr< ::uav_ros_msgs::GeoBrickApproachRequest > GeoBrickApproachRequestPtr;
typedef boost::shared_ptr< ::uav_ros_msgs::GeoBrickApproachRequest const> GeoBrickApproachRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator1> & lhs, const ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator2> & rhs)
{
  return lhs.enable == rhs.enable &&
    lhs.brick_color == rhs.brick_color &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude_relative == rhs.altitude_relative;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator1> & lhs, const ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb34b25fc98df5292712d15c143066c4";
  }

  static const char* value(const ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb34b25fc98df529ULL;
  static const uint64_t static_value2 = 0x2712d15c143066c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_ros_msgs/GeoBrickApproachRequest";
  }

  static const char* value(const ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enable\n"
"string brick_color\n"
"float32 latitude\n"
"float32 longitude\n"
"float32 altitude_relative\n"
;
  }

  static const char* value(const ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
      stream.next(m.brick_color);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude_relative);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeoBrickApproachRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_ros_msgs::GeoBrickApproachRequest_<ContainerAllocator>& v)
  {
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "brick_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.brick_color);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude_relative: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_relative);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_ROS_MSGS_MESSAGE_GEOBRICKAPPROACHREQUEST_H
