// Generated by gencpp from file topp_ros/GetHelixPointsRequest.msg
// DO NOT EDIT!


#ifndef TOPP_ROS_MESSAGE_GETHELIXPOINTSREQUEST_H
#define TOPP_ROS_MESSAGE_GETHELIXPOINTSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace topp_ros
{
template <class ContainerAllocator>
struct GetHelixPointsRequest_
{
  typedef GetHelixPointsRequest_<ContainerAllocator> Type;

  GetHelixPointsRequest_()
    : r(0.0)
    , angleStep(0.0)
    , x0(0.0)
    , y0(0.0)
    , z0(0.0)
    , zf(0.0)
    , deltaZ(0.0)  {
    }
  GetHelixPointsRequest_(const ContainerAllocator& _alloc)
    : r(0.0)
    , angleStep(0.0)
    , x0(0.0)
    , y0(0.0)
    , z0(0.0)
    , zf(0.0)
    , deltaZ(0.0)  {
  (void)_alloc;
    }



   typedef double _r_type;
  _r_type r;

   typedef double _angleStep_type;
  _angleStep_type angleStep;

   typedef double _x0_type;
  _x0_type x0;

   typedef double _y0_type;
  _y0_type y0;

   typedef double _z0_type;
  _z0_type z0;

   typedef double _zf_type;
  _zf_type zf;

   typedef double _deltaZ_type;
  _deltaZ_type deltaZ;





  typedef boost::shared_ptr< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetHelixPointsRequest_

typedef ::topp_ros::GetHelixPointsRequest_<std::allocator<void> > GetHelixPointsRequest;

typedef boost::shared_ptr< ::topp_ros::GetHelixPointsRequest > GetHelixPointsRequestPtr;
typedef boost::shared_ptr< ::topp_ros::GetHelixPointsRequest const> GetHelixPointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::topp_ros::GetHelixPointsRequest_<ContainerAllocator1> & lhs, const ::topp_ros::GetHelixPointsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.r == rhs.r &&
    lhs.angleStep == rhs.angleStep &&
    lhs.x0 == rhs.x0 &&
    lhs.y0 == rhs.y0 &&
    lhs.z0 == rhs.z0 &&
    lhs.zf == rhs.zf &&
    lhs.deltaZ == rhs.deltaZ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::topp_ros::GetHelixPointsRequest_<ContainerAllocator1> & lhs, const ::topp_ros::GetHelixPointsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace topp_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4f144c19586ad3058e993b212b9c8d8";
  }

  static const char* value(const ::topp_ros::GetHelixPointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4f144c19586ad30ULL;
  static const uint64_t static_value2 = 0x58e993b212b9c8d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "topp_ros/GetHelixPointsRequest";
  }

  static const char* value(const ::topp_ros::GetHelixPointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 r\n"
"float64 angleStep\n"
"float64 x0\n"
"float64 y0\n"
"float64 z0\n"
"float64 zf\n"
"float64 deltaZ\n"
;
  }

  static const char* value(const ::topp_ros::GetHelixPointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r);
      stream.next(m.angleStep);
      stream.next(m.x0);
      stream.next(m.y0);
      stream.next(m.z0);
      stream.next(m.zf);
      stream.next(m.deltaZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetHelixPointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::topp_ros::GetHelixPointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::topp_ros::GetHelixPointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "angleStep: ";
    Printer<double>::stream(s, indent + "  ", v.angleStep);
    s << indent << "x0: ";
    Printer<double>::stream(s, indent + "  ", v.x0);
    s << indent << "y0: ";
    Printer<double>::stream(s, indent + "  ", v.y0);
    s << indent << "z0: ";
    Printer<double>::stream(s, indent + "  ", v.z0);
    s << indent << "zf: ";
    Printer<double>::stream(s, indent + "  ", v.zf);
    s << indent << "deltaZ: ";
    Printer<double>::stream(s, indent + "  ", v.deltaZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOPP_ROS_MESSAGE_GETHELIXPOINTSREQUEST_H
